# coding: utf-8

"""
    Flagr

    Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\".   # noqa: E501

    OpenAPI spec version: 1.1.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PutFlagRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'data_records_enabled': 'bool',
        'entity_type': 'str',
        'enabled': 'bool',
        'key': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'description': 'description',
        'data_records_enabled': 'dataRecordsEnabled',
        'entity_type': 'entityType',
        'enabled': 'enabled',
        'key': 'key',
        'notes': 'notes'
    }

    def __init__(self, description=None, data_records_enabled=None, entity_type=None, enabled=None, key=None, notes=None):  # noqa: E501
        """PutFlagRequest - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._data_records_enabled = None
        self._entity_type = None
        self._enabled = None
        self._key = None
        self._notes = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if data_records_enabled is not None:
            self.data_records_enabled = data_records_enabled
        if entity_type is not None:
            self.entity_type = entity_type
        if enabled is not None:
            self.enabled = enabled
        if key is not None:
            self.key = key
        if notes is not None:
            self.notes = notes

    @property
    def description(self):
        """Gets the description of this PutFlagRequest.  # noqa: E501


        :return: The description of this PutFlagRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutFlagRequest.


        :param description: The description of this PutFlagRequest.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def data_records_enabled(self):
        """Gets the data_records_enabled of this PutFlagRequest.  # noqa: E501

        enabled data records will get data logging in the metrics pipeline, for example, kafka.  # noqa: E501

        :return: The data_records_enabled of this PutFlagRequest.  # noqa: E501
        :rtype: bool
        """
        return self._data_records_enabled

    @data_records_enabled.setter
    def data_records_enabled(self, data_records_enabled):
        """Sets the data_records_enabled of this PutFlagRequest.

        enabled data records will get data logging in the metrics pipeline, for example, kafka.  # noqa: E501

        :param data_records_enabled: The data_records_enabled of this PutFlagRequest.  # noqa: E501
        :type: bool
        """

        self._data_records_enabled = data_records_enabled

    @property
    def entity_type(self):
        """Gets the entity_type of this PutFlagRequest.  # noqa: E501

        it will overwrite entityType into evaluation logs if it's not empty  # noqa: E501

        :return: The entity_type of this PutFlagRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PutFlagRequest.

        it will overwrite entityType into evaluation logs if it's not empty  # noqa: E501

        :param entity_type: The entity_type of this PutFlagRequest.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def enabled(self):
        """Gets the enabled of this PutFlagRequest.  # noqa: E501


        :return: The enabled of this PutFlagRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PutFlagRequest.


        :param enabled: The enabled of this PutFlagRequest.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def key(self):
        """Gets the key of this PutFlagRequest.  # noqa: E501


        :return: The key of this PutFlagRequest.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PutFlagRequest.


        :param key: The key of this PutFlagRequest.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def notes(self):
        """Gets the notes of this PutFlagRequest.  # noqa: E501


        :return: The notes of this PutFlagRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PutFlagRequest.


        :param notes: The notes of this PutFlagRequest.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutFlagRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutFlagRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
