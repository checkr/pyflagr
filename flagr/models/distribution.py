# coding: utf-8

"""
    Flagr

    Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\".   # noqa: E501

    OpenAPI spec version: 1.1.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Distribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'percent': 'int',
        'variant_key': 'str',
        'variant_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'percent': 'percent',
        'variant_key': 'variantKey',
        'variant_id': 'variantID'
    }

    def __init__(self, id=None, percent=None, variant_key=None, variant_id=None):  # noqa: E501
        """Distribution - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._percent = None
        self._variant_key = None
        self._variant_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.percent = percent
        self.variant_key = variant_key
        self.variant_id = variant_id

    @property
    def id(self):
        """Gets the id of this Distribution.  # noqa: E501


        :return: The id of this Distribution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Distribution.


        :param id: The id of this Distribution.  # noqa: E501
        :type: int
        """
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def percent(self):
        """Gets the percent of this Distribution.  # noqa: E501


        :return: The percent of this Distribution.  # noqa: E501
        :rtype: int
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this Distribution.


        :param percent: The percent of this Distribution.  # noqa: E501
        :type: int
        """
        if percent is None:
            raise ValueError("Invalid value for `percent`, must not be `None`")  # noqa: E501
        if percent is not None and percent > 100:  # noqa: E501
            raise ValueError("Invalid value for `percent`, must be a value less than or equal to `100`")  # noqa: E501
        if percent is not None and percent < 0:  # noqa: E501
            raise ValueError("Invalid value for `percent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percent = percent

    @property
    def variant_key(self):
        """Gets the variant_key of this Distribution.  # noqa: E501


        :return: The variant_key of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._variant_key

    @variant_key.setter
    def variant_key(self, variant_key):
        """Sets the variant_key of this Distribution.


        :param variant_key: The variant_key of this Distribution.  # noqa: E501
        :type: str
        """
        if variant_key is None:
            raise ValueError("Invalid value for `variant_key`, must not be `None`")  # noqa: E501
        if variant_key is not None and len(variant_key) < 1:
            raise ValueError("Invalid value for `variant_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._variant_key = variant_key

    @property
    def variant_id(self):
        """Gets the variant_id of this Distribution.  # noqa: E501


        :return: The variant_id of this Distribution.  # noqa: E501
        :rtype: int
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this Distribution.


        :param variant_id: The variant_id of this Distribution.  # noqa: E501
        :type: int
        """
        if variant_id is None:
            raise ValueError("Invalid value for `variant_id`, must not be `None`")  # noqa: E501
        if variant_id is not None and variant_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `variant_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._variant_id = variant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Distribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Distribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
