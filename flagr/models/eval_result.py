# coding: utf-8

"""
    Flagr

    Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\".   # noqa: E501

    OpenAPI spec version: 1.1.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EvalResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flag_id': 'int',
        'flag_key': 'str',
        'flag_snapshot_id': 'int',
        'segment_id': 'int',
        'variant_id': 'int',
        'variant_key': 'str',
        'variant_attachment': 'object',
        'eval_context': 'EvalContext',
        'timestamp': 'str',
        'eval_debug_log': 'EvalDebugLog'
    }

    attribute_map = {
        'flag_id': 'flagID',
        'flag_key': 'flagKey',
        'flag_snapshot_id': 'flagSnapshotID',
        'segment_id': 'segmentID',
        'variant_id': 'variantID',
        'variant_key': 'variantKey',
        'variant_attachment': 'variantAttachment',
        'eval_context': 'evalContext',
        'timestamp': 'timestamp',
        'eval_debug_log': 'evalDebugLog'
    }

    def __init__(self, flag_id=None, flag_key=None, flag_snapshot_id=None, segment_id=None, variant_id=None, variant_key=None, variant_attachment=None, eval_context=None, timestamp=None, eval_debug_log=None):  # noqa: E501
        """EvalResult - a model defined in Swagger"""  # noqa: E501

        self._flag_id = None
        self._flag_key = None
        self._flag_snapshot_id = None
        self._segment_id = None
        self._variant_id = None
        self._variant_key = None
        self._variant_attachment = None
        self._eval_context = None
        self._timestamp = None
        self._eval_debug_log = None
        self.discriminator = None

        if flag_id is not None:
            self.flag_id = flag_id
        if flag_key is not None:
            self.flag_key = flag_key
        if flag_snapshot_id is not None:
            self.flag_snapshot_id = flag_snapshot_id
        if segment_id is not None:
            self.segment_id = segment_id
        if variant_id is not None:
            self.variant_id = variant_id
        if variant_key is not None:
            self.variant_key = variant_key
        if variant_attachment is not None:
            self.variant_attachment = variant_attachment
        if eval_context is not None:
            self.eval_context = eval_context
        if timestamp is not None:
            self.timestamp = timestamp
        if eval_debug_log is not None:
            self.eval_debug_log = eval_debug_log

    @property
    def flag_id(self):
        """Gets the flag_id of this EvalResult.  # noqa: E501


        :return: The flag_id of this EvalResult.  # noqa: E501
        :rtype: int
        """
        return self._flag_id

    @flag_id.setter
    def flag_id(self, flag_id):
        """Sets the flag_id of this EvalResult.


        :param flag_id: The flag_id of this EvalResult.  # noqa: E501
        :type: int
        """

        self._flag_id = flag_id

    @property
    def flag_key(self):
        """Gets the flag_key of this EvalResult.  # noqa: E501


        :return: The flag_key of this EvalResult.  # noqa: E501
        :rtype: str
        """
        return self._flag_key

    @flag_key.setter
    def flag_key(self, flag_key):
        """Sets the flag_key of this EvalResult.


        :param flag_key: The flag_key of this EvalResult.  # noqa: E501
        :type: str
        """

        self._flag_key = flag_key

    @property
    def flag_snapshot_id(self):
        """Gets the flag_snapshot_id of this EvalResult.  # noqa: E501


        :return: The flag_snapshot_id of this EvalResult.  # noqa: E501
        :rtype: int
        """
        return self._flag_snapshot_id

    @flag_snapshot_id.setter
    def flag_snapshot_id(self, flag_snapshot_id):
        """Sets the flag_snapshot_id of this EvalResult.


        :param flag_snapshot_id: The flag_snapshot_id of this EvalResult.  # noqa: E501
        :type: int
        """

        self._flag_snapshot_id = flag_snapshot_id

    @property
    def segment_id(self):
        """Gets the segment_id of this EvalResult.  # noqa: E501


        :return: The segment_id of this EvalResult.  # noqa: E501
        :rtype: int
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this EvalResult.


        :param segment_id: The segment_id of this EvalResult.  # noqa: E501
        :type: int
        """

        self._segment_id = segment_id

    @property
    def variant_id(self):
        """Gets the variant_id of this EvalResult.  # noqa: E501


        :return: The variant_id of this EvalResult.  # noqa: E501
        :rtype: int
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this EvalResult.


        :param variant_id: The variant_id of this EvalResult.  # noqa: E501
        :type: int
        """

        self._variant_id = variant_id

    @property
    def variant_key(self):
        """Gets the variant_key of this EvalResult.  # noqa: E501


        :return: The variant_key of this EvalResult.  # noqa: E501
        :rtype: str
        """
        return self._variant_key

    @variant_key.setter
    def variant_key(self, variant_key):
        """Sets the variant_key of this EvalResult.


        :param variant_key: The variant_key of this EvalResult.  # noqa: E501
        :type: str
        """

        self._variant_key = variant_key

    @property
    def variant_attachment(self):
        """Gets the variant_attachment of this EvalResult.  # noqa: E501


        :return: The variant_attachment of this EvalResult.  # noqa: E501
        :rtype: object
        """
        return self._variant_attachment

    @variant_attachment.setter
    def variant_attachment(self, variant_attachment):
        """Sets the variant_attachment of this EvalResult.


        :param variant_attachment: The variant_attachment of this EvalResult.  # noqa: E501
        :type: object
        """

        self._variant_attachment = variant_attachment

    @property
    def eval_context(self):
        """Gets the eval_context of this EvalResult.  # noqa: E501


        :return: The eval_context of this EvalResult.  # noqa: E501
        :rtype: EvalContext
        """
        return self._eval_context

    @eval_context.setter
    def eval_context(self, eval_context):
        """Sets the eval_context of this EvalResult.


        :param eval_context: The eval_context of this EvalResult.  # noqa: E501
        :type: EvalContext
        """

        self._eval_context = eval_context

    @property
    def timestamp(self):
        """Gets the timestamp of this EvalResult.  # noqa: E501


        :return: The timestamp of this EvalResult.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EvalResult.


        :param timestamp: The timestamp of this EvalResult.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def eval_debug_log(self):
        """Gets the eval_debug_log of this EvalResult.  # noqa: E501


        :return: The eval_debug_log of this EvalResult.  # noqa: E501
        :rtype: EvalDebugLog
        """
        return self._eval_debug_log

    @eval_debug_log.setter
    def eval_debug_log(self, eval_debug_log):
        """Sets the eval_debug_log of this EvalResult.


        :param eval_debug_log: The eval_debug_log of this EvalResult.  # noqa: E501
        :type: EvalDebugLog
        """

        self._eval_debug_log = eval_debug_log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EvalResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EvalResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
